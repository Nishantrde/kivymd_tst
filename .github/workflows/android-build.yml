# .github/workflows/android-build.yml
name: Android CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-apk:
    runs-on: ubuntu-24.04

    steps:
      # 1. Check out your code
      - uses: actions/checkout@v3

      # 2. JDK 17 for sdkmanager
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '17'

      # 3. Download & unpack the Android command-line tools
      - name: Install Android SDK command-line tools
        run: |
          export ANDROID_SDK_ROOT=$HOME/Android/Sdk
          mkdir -p $ANDROID_SDK_ROOT/cmdline-tools
          wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip \
            -O cmdline-tools.zip
          unzip -q cmdline-tools.zip -d $ANDROID_SDK_ROOT/cmdline-tools
          mv $ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools \
             $ANDROID_SDK_ROOT/cmdline-tools/latest
          rm cmdline-tools.zip

      # 4. Use sdkmanager to install platform-tools, build-tools (with aidl), platforms & NDK
      - name: Install Android SDK packages
        run: |
          export ANDROID_SDK_ROOT=$HOME/Android/Sdk
          yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager \
            --sdk_root=$ANDROID_SDK_ROOT \
            "platform-tools" \
            "build-tools;30.0.3" \
            "platforms;android-33" \
            "ndk;21.4.7075529"

      # 5. Mirror cmdline-tools into the old tools/bin path Buildozer checks
      - name: Create legacy tools/bin layout
        run: |
          export ANDROID_SDK_ROOT=$HOME/Android/Sdk
          mkdir -p $ANDROID_SDK_ROOT/tools/bin
          ln -sf $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/* $ANDROID_SDK_ROOT/tools/bin/

      # 6. Expose SDK & tools on the environment / PATH
      - name: Configure Android environment
        run: |
          echo "ANDROID_SDK_ROOT=$HOME/Android/Sdk" >> $GITHUB_ENV
          echo "ANDROID_HOME=$HOME/Android/Sdk"     >> $GITHUB_ENV
          echo "ANDROIDSDK=$HOME/Android/Sdk"       >> $GITHUB_ENV
          echo "$HOME/Android/Sdk/platform-tools"   >> $GITHUB_PATH
          echo "$HOME/Android/Sdk/build-tools/30.0.3" >> $GITHUB_PATH
          echo "$HOME/Android/Sdk/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "$HOME/Android/Sdk/ndk/21.4.7075529" >> $GITHUB_PATH

      # 7. Link the full SDK into Buildozer’s default android-sdk stub
      - name: Link Android SDK for Buildozer
        run: |
          rm -rf ~/.buildozer/android/platform/android-sdk
          mkdir -p ~/.buildozer/android/platform
          ln -s $HOME/Android/Sdk ~/.buildozer/android/platform/android-sdk

      # 8. Link the NDK into Buildozer’s expected android-ndk folder
      - name: Link Android NDK for Buildozer
        run: |
          rm -rf ~/.buildozer/android/platform/android-ndk-r25b
          # use the version pythonforandroid will pick (r25b is the symlink target)
          mkdir -p ~/.buildozer/android/platform
          ln -s $HOME/Android/Sdk/ndk/21.4.7075529 \
                ~/.buildozer/android/platform/android-ndk-r25b

      # 9. Set up Python & install Buildozer + Cython
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install Buildozer & Cython
        run: |
          python -m pip install --upgrade pip
          python -m pip install buildozer Cython

      # 10. Build your debug APK (pointing at your SDK/NDK)
      - name: Build Debug APK
        env:
          ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
          ANDROID_HOME:     ${{ env.ANDROID_HOME }}
          ANDROIDSDK:       ${{ env.ANDROIDSDK }}
        run: |
          # If you haven't yet generated a buildozer.spec:
          # buildozer init
          buildozer -v android debug

      # 11. Upload the resulting APK
      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: myapp-debug-apk
          path: bin/*.apk
